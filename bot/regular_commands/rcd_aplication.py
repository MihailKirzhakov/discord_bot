import discord
from discord.ui import Modal, InputText, Select, View, button
from loguru import logger

from .embeds import (
    start_rcd_embed, rcd_list_embed, ask_veteran_embed,
    final_rcd_list_embed
)
from variables import VETERAN_ROLE


member_list: list = []


class RaidChampionDominionApplication(Modal):
    """
    –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞—è–≤–∫—É –†–ß–î.
    """
    def __init__(
            self,
            embed: discord.Embed,
            message: discord.Message
    ):
        super().__init__(title='–ó–∞—è–≤–∫–∞ –Ω–∞ –†–ß–î', timeout=None)
        self.embed = embed
        self.message = message

        self.add_item(
            InputText(
                style=discord.InputTextStyle.multiline,
                label='–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Å—Ç–∏',
                placeholder='0-500',
                max_length=3
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –∫–ª–∞—Å—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –Ω–∞ –†–ß–î',
                placeholder='–ï—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å, –∑–Ω–∞—á–∏—Ç –ª—é–±–æ–π –∫–ª–∞—Å—Å',
                required=False
            )
        )

    async def callback(self, interaction: discord.Interaction):
        try:
            if interaction.user.display_name in member_list:
                return await interaction.respond(
                    '_–¢—ã —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É! ‚úÖ_',
                    ephemeral=True,
                    delete_after=10
                )
            honor: str = str(self.children[0].value)
            class_role: str = str(self.children[1].value)
            if not class_role:
                class_role = '–õ—é–±–æ–π –∫–ª–∞—Å—Å'
            field_index = 0 if discord.utils.get(interaction.user.roles, name=VETERAN_ROLE) else 1
            self.embed.fields[field_index].value += (
                f'{interaction.user.mention}: {class_role} ({honor})\n'
            )
            await self.message.edit(embed=self.embed)
            member_list.append(f'{interaction.user.display_name}')
            await interaction.respond(
                '_–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ_',
                ephemeral=True,
                delete_after=15
            )
            logger.info(
                f'–ü—Ä–∏–Ω—è—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –†–ß–î –æ—Ç {interaction.user.display_name}')
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '
                f'{interaction.user.display_name} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞{error}'
            )


class RCDButton(View):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ –†–ß–î.

    Parametrs:
    ----------
        channel: discord.TextChannel
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å.

    Returns:
    --------
        None
    """
    def __init__(
            self,
            embed: discord.Embed,
            message: discord.Message,
            timeout: float | None = None
    ):
        super().__init__(timeout=timeout)
        self.embed = embed
        self.message = message

    @button(
            label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –†–ß–î', style=discord.ButtonStyle.green,
            emoji='üìã', custom_id='–ó–∞—è–≤–∫–∞–†–ß–î'
    )
    async def callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        try:
            await interaction.response.send_modal(
                RaidChampionDominionApplication(
                    embed=self.embed, message=self.message
                ))
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î '
                f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user.display_name} '
                f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )


class SelectMemberToRCD(Select):
    """
    –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –†–ß–î —Å–ø–∏—Å–æ–∫
    """
    def __init__(
            self,
            index: int,
            embed: discord.Embed,
            select_type: discord.ComponentType = discord.ComponentType.user_select
    ) -> None:
        super().__init__(select_type=select_type)
        self.index = index
        self.embed = embed

    def callback(self, interaction: discord.Interaction):
        if not self.values:
            self.embed.fields[self.index].value += '–ù–µ—Ç'
        else:
            selected_members = [user.mention for user in self.values]
            self.embed.fields[self.index].value += ', '.join(selected_members)


class CreateRCDList(View):
    """
    –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –†–ß–î —Å–ø–∏—Å–∫–∞.

    Parametrs:
    ----------
        channel: discord.TextChannel
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å.

    Returns:
    --------
        None
    """
    embed = final_rcd_list_embed()

    def __init__(
        self,
        channel: discord.TextChannel,
        timeout: float | None = None
    ):
        super().__init__(timeout=timeout)
        self.channel = channel

    @button(
        label='–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫', style=discord.ButtonStyle.green,
        custom_id='–°–æ–∑–¥–∞—Ç—å–°–ø–∏—Å–æ–∫'
    )
    async def create_list_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await interaction.respond(embed=self.embed)

    @button(
        label='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫', style=discord.ButtonStyle.blurple,
        custom_id='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å–°–ø–∏—Å–æ–∫'
    )
    async def publish_list_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.channel.send(embed=self.embed)
        await interaction.respond(
            f'–°–ø–∏—Å–æ–∫ –†–ß–î –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {self.channel.mention}'
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–í–æ–∏–Ω–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–í–æ–∏–Ω–æ–≤'
    )
    async def add_warior_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–í–æ–∏–Ω—ã:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=0, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–ü–∞–ª–∞–¥–∏–Ω–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–ü–∞–ª–∞–¥–∏–Ω–æ–≤'
    )
    async def add_paladin_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–ü–∞–ª–∞–¥–∏–Ω:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=1, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–ò–Ω–∂–µ–Ω–µ—Ä–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–ò–Ω–∂–µ–Ω–µ—Ä–æ–≤'
    )
    async def add_ingeneer_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–ò–Ω–∂–µ–Ω–µ—Ä—ã:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=2, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–ñ—Ä–µ—Ü–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–ñ—Ä–µ—Ü–æ–≤'
    )
    async def add_priest_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–ñ—Ä–µ—Ü—ã:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=3, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–î—Ä—É–∏–¥–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–î—Ä—É–∏–¥–æ–≤'
    )
    async def add_druid_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–®–∞–º–∞–Ω:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=4, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–ú–∏—Å—Ç–∏–∫–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–ú–∏—Å—Ç–∏–∫–æ–≤'
    )
    async def add_mistic_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–ú–∏—Å—Ç–∏–∫–∏:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=5, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–õ—É—á–Ω–∏–∫–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–õ—É—á–Ω–∏–∫–æ–≤'
    )
    async def add_stalker_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–õ—É—á–Ω–∏–∫–∏:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=6, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–ú–∞–≥–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–ú–∞–≥–æ–≤'
    )
    async def add_mage_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–ú–∞–≥–∏:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=7, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–æ–≤'
    )
    async def add_necromant_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–ù–µ–∫—Ä–æ–º–∞–Ω—Ç—ã:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=8, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–ë–∞—Ä–¥–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–ë–∞—Ä–¥–æ–≤'
    )
    async def add_bard_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–ë–∞—Ä–¥—ã:',
            value='',
            inline=False
        )
        await interaction.respond(
            view=SelectMemberToRCD(index=9, embed=self.embed)
        )

    @button(
        label='–î–æ–±–∞–≤–∏—Ç—å "–î–µ–º–æ–Ω–æ–ª–æ–≥–æ–≤"', style=discord.ButtonStyle.green,
        custom_id='–î–æ–±–∞–≤–∏—Ç—å–î–µ–º–æ–Ω–æ–ª–æ–≥–æ–≤'
    )
    async def add_deamon_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        self.embed.add_field(
            name='–î–µ–º–æ–Ω—ã:',
            value='',
            inline=False
        )
        view = discord.ui.View()
        view.add_item(SelectMemberToRCD(index=0, embed=self.embed))
        await interaction.respond(
            view=view
        )


class StartRCDButton(View):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –†–ß–î –∑–∞—è–≤–æ–∫.

    Parametrs:
    ----------
        channel: discord.TextChannel
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å.

    Returns:
    --------
        None
    """
    def __init__(
        self,
        channel: discord.TextChannel,
        timeout: float | None = None
    ):
        super().__init__(timeout=timeout)
        self.channel = channel

    @button(
        label='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î', style=discord.ButtonStyle.green,
        custom_id='–°—Ç–∞—Ä—Ç–ó–∞—è–≤–æ–∫–†–ß–î'
    )
    async def start_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        try:
            await interaction.respond(embed=rcd_list_embed())
            message = interaction.channel.last_message
            await self.channel.send(
                embed=start_rcd_embed(),
                view=RCDButton(embed=rcd_list_embed(), message=message)
            )
            await interaction.respond(view=CreateRCDList(channel=self.channel))
            await interaction.respond(
                f'_–ó–∞—è–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ {self.channel.mention} üëå_',
                ephemeral=True,
                delete_after=10
            )
            logger.info(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.display_name} –∑–∞–ø—É—Å—Ç–∏–ª '
                f'–∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î'
            )
        except Exception as error:
            logger.error(f'–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É StartRCDButton –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}')

    @button(
        label='–°–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö "–í–µ—Ç–µ—Ä–∞–Ω–æ–≤"', style=discord.ButtonStyle.blurple,
        emoji='‚ùì', custom_id='–°–ø—Ä–æ—Å–∏—Ç—å–í–µ—Ç–µ—Ä–∞–Ω–æ–≤'
    )
    async def ask_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        url = self.channel.jump_url
        role = discord.utils.get(interaction.guild.roles, name=VETERAN_ROLE)
        veteran_members = [member for member in interaction.guild.members if role in member.roles]
        for veteran_member in veteran_members:
            await veteran_member.send(
                embed=ask_veteran_embed(
                    member=interaction.user, url=url
                ),
                delete_after=10800
            )
        await interaction.respond(
            '–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –≤–µ—Ç–µ—Ä–∞–Ω–∞–º',
            ephemeral=True,
            delete_after=10
        )
