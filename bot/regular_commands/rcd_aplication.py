from datetime import datetime
import re

import discord
from discord.ui import Modal, InputText, View, button, select
from loguru import logger

from .embeds import (
    start_rcd_embed, rcd_list_embed, ask_veteran_embed,
    final_rcd_list_embed, publish_rcd_embed
)
from role_application.functions import has_required_role
from variables import VETERAN_ROLE, ANSWERS_IF_NO_ROLE


member_list: list = []
rcd_date_list: dict[str, str] = {}
embed: dict[str, discord.Embed] = {}
last_message_to_finish: dict[str, discord.Message] = {}
rcd_application_channel: dict[str, discord.TextChannel] = {}
publish_embed: dict[str, discord.Embed] = {}


class RcdDate(Modal):
    """
    –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –†–ß–î.

    Attributes:
    ----------
        date: str
            –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –†–ß–î.
    """
    def __init__(self):
        super().__init__(title='–í–≤–µ–¥–∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –†–ß–î', timeout=None)

        self.add_item(
            InputText(
                style=discord.InputTextStyle.multiline,
                label='–£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú',
                placeholder='–î–î.–ú–ú',
                max_length=5
            )
        )

    async def callback(self, interaction: discord.Interaction):
        date_str: str = str(self.children[0].value)
        date_pattern = r'^([0-2][0-9]|3[0-1])[.,/](0[1-9]|1[0-2])$'
        date_match = re.match(date_pattern, date_str)

        if not date_match:
            return await interaction.respond(
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú',
                ephemeral=True,
                delete_after=5
            )

        try:
            day, month = map(int, date_match.groups())
            current_year = datetime.now().year
            rcd_date = datetime(
                year=current_year,
                month=month,
                day=day)
            if rcd_date < datetime.now():
                rcd_date = rcd_date.replace(year=current_year + 1)
            convert_rcd_date = discord.utils.format_dt(rcd_date, style="D")
            rcd_date_list['convert_rcd_date'] = convert_rcd_date
            embed['final_rcd_list_embed'] = final_rcd_list_embed(convert_rcd_date)
            embed['rcd_list_embed'] = rcd_list_embed(convert_rcd_date)
            await interaction.respond(embed=rcd_list_embed(convert_rcd_date), view=StartRCDButton())
            # await interaction.respond(
            #     '_–†–ß–î –∑–∞—è–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã!_',
            #     ephemeral=True,
            #     delete_after=1
            # )
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã –†–ß–î –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )


class RaidChampionDominionApplication(Modal):
    """
    –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞—è–≤–∫—É –†–ß–î.

    Attributes:
    ----------
        embed: discord.Embed
            –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    def __init__(self):
        super().__init__(title='–ó–∞—è–≤–∫–∞ –Ω–∞ –†–ß–î', timeout=None)

        self.add_item(
            InputText(
                style=discord.InputTextStyle.multiline,
                label='–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Å—Ç–∏',
                placeholder='0-500',
                max_length=3
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –∫–ª–∞—Å—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –Ω–∞ –†–ß–î',
                placeholder='–ï—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å, –∑–Ω–∞—á–∏—Ç –ª—é–±–æ–π –∫–ª–∞—Å—Å',
                required=False
            )
        )

    async def callback(self, interaction: discord.Interaction):
        try:
            if interaction.user.id in member_list:
                return await interaction.respond(
                    '_–¢—ã —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É! ‚úÖ_',
                    ephemeral=True,
                    delete_after=1
                )
            honor: str = str(self.children[0].value)
            class_role: str = str(self.children[1].value)
            if not class_role:
                class_role = '–õ—é–±–æ–π –∫–ª–∞—Å—Å'
            guild = interaction.user.mutual_guilds[0]
            member = guild.get_member(interaction.user.id)
            field_index = 0 if discord.utils.get(member.roles, name=VETERAN_ROLE) else 1
            embed.get('rcd_list_embed').fields[field_index].value += (
                f'{interaction.user.mention}: {class_role} ({honor})\n'
            )
            await last_message_to_finish.get('start_RCD_button_message').edit(embed=embed.get('rcd_list_embed'))
            member_list.append(interaction.user.id)
            if interaction.channel.type.value == 1:
                await interaction.message.delete()
            await interaction.respond(
                '_–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ_',
                ephemeral=True,
                delete_after=1
            )
            logger.info(
                f'–ü—Ä–∏–Ω—è—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –†–ß–î –æ—Ç {interaction.user.display_name}')
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '
                f'{interaction.user.display_name} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )


class PrivateMessageView(View):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –∏–¥—Ç–∏ –Ω–∞ –†–ß–î.
    """
    def __init__(self):
        super().__init__(timeout=None)

    @button(
            label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –†–ß–î', style=discord.ButtonStyle.green,
            emoji='üìã', custom_id='–ó–∞—è–≤–∫–∞–†–ß–î'
    )
    async def acces_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        try:
            await interaction.response.send_modal(RaidChampionDominionApplication())
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î '
                f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user.display_name} '
                f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )

    @button(
        label='–ú–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç ‚ùå',
        style=discord.ButtonStyle.red,
        custom_id='–ú–µ–Ω—è–ù–µ–ë—É–¥–µ—Ç'
    )
    async def denied_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        try:
            await interaction.message.delete()
            await interaction.respond(
                '_–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ_',
                ephemeral=True,
                delete_after=1
            )
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user.display_name} '
                f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )


class RCDButton(View):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ –†–ß–î.

    Attributes:
    ----------
        embed: discord.Embed
            –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    def __init__(
        self,
        timeout: float | None = None
    ):
        super().__init__(timeout=timeout)

    @button(
            label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –†–ß–î', style=discord.ButtonStyle.green,
            emoji='üìã', custom_id='–ó–∞—è–≤–∫–∞–†–ß–î'
    )
    async def callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        try:
            await interaction.response.send_modal(
                RaidChampionDominionApplication())
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î '
                f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user.display_name} '
                f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )


class SelectMemberToRCD(View):
    """
    –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –†–ß–î —Å–ø–∏—Å–æ–∫.

    Attributes:
    ----------
        index: int
            –ò–Ω–¥–µ–∫—Å –ø–æ–ª—è –≤—Ç—Å—Ç—Ä–∞–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Embed.

        embed: discord.Embed
            –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    def __init__(self, index: int) -> None:
        super().__init__(timeout=None)
        self.index = index

    @select(
        select_type=discord.ComponentType.user_select,
        min_values=1,
        max_values=3,
        placeholder='–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–æ–≤...'
    )
    async def select_callback(
        self,
        select: discord.ui.Select,
        interaction: discord.Interaction
    ):
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        await self.update_embed(
            interaction,', '.join(user.mention for user in select.values)
        )

    @button(label='–û—á–∏—Å—Ç–∏—Ç—å', style=discord.ButtonStyle.gray, custom_id='–û—á–∏—Å—Ç–∏—Ç—å')
    async def button_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        await self.update_embed(interaction, '')

    async def update_embed(
        self,
        interaction: discord.Interaction,
        value: str
    ) -> None:
        embed.get('final_rcd_list_embed').fields[self.index].value = value
        await last_message_to_finish.get('final_rcd_list_message').edit(embed=embed.get('final_rcd_list_embed'))
        await interaction.message.delete()


class CreateRCDList(View):
    """
    –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –†–ß–î —Å–ø–∏—Å–∫–∞, –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞.

    Attributes:
    ----------
        channel: discord.TextChannel
            –ö–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –†–ß–î.
    """

    index_class_role = {
        0: '–í–æ–∏–Ω—ã:',
        1: '–ü–∞–ª–∞–¥–∏–Ω—ã:',
        2: '–ò–Ω–∂–µ–Ω–µ—Ä—ã:',
        3: '–ñ—Ä–µ—Ü—ã:',
        4: '–®–∞–º–∞–Ω—ã:',
        5: '–ú–∏—Å—Ç–∏–∫–∏:',
        6: '–õ—É—á–Ω–∏–∫–∏:',
        7: '–ú–∞–≥–∏:',
        8: '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç—ã:',
        9: '–ë–∞—Ä–¥—ã:',
        10: '–î–µ–º–æ–Ω—ã:'
    }

    def __init__(
        self,
        timeout: float | None = None
    ):
        super().__init__(timeout=timeout)

    @button(
        label='–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫', style=discord.ButtonStyle.blurple,
        custom_id='–°–æ–∑–¥–∞—Ç—å–°–ø–∏—Å–æ–∫'
    )
    async def create_list_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        last_message_to_finish['create_RCD_list_buttons'] = interaction.message
        obj_1: discord.ui.Button = self.children[0]
        obj_13: discord.ui.Button = self.children[12]

        obj_1.label = '‚¨áÔ∏è –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω –Ω–∏–∂–µ ‚¨áÔ∏è'
        obj_1.style = discord.ButtonStyle.gray
        obj_1.disabled = True

        for button in self.children[1:12]:
            button.style = discord.ButtonStyle.green
            button.disabled = False

        obj_13.style = discord.ButtonStyle.blurple
        obj_13.disabled = False
        await interaction.message.edit(view=self)
        await interaction.respond(embed=embed.get('final_rcd_list_embed'))

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–í–æ–∏–Ω–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–í–æ–∏–Ω–æ–≤', disabled=True
    )
    async def add_warior_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 0)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ü–∞–ª–∞–¥–∏–Ω–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–ü–∞–ª–∞–¥–∏–Ω–æ–≤', disabled=True
    )
    async def add_paladin_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 1)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ò–Ω–∂–µ–Ω–µ—Ä–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–ò–Ω–∂–µ–Ω–µ—Ä–æ–≤', disabled=True
    )
    async def add_ingeneer_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 2)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ñ—Ä–µ—Ü–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–ñ—Ä–µ—Ü–æ–≤', disabled=True
    )
    async def add_priest_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 3)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–î—Ä—É–∏–¥–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–î—Ä—É–∏–¥–æ–≤', disabled=True
    )
    async def add_druid_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 4)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ú–∏—Å—Ç–∏–∫–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–ú–∏—Å—Ç–∏–∫–æ–≤', disabled=True
    )
    async def add_mistic_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 5)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–õ—É—á–Ω–∏–∫–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–õ—É—á–Ω–∏–∫–æ–≤', disabled=True
    )
    async def add_stalker_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 6)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ú–∞–≥–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–ú–∞–≥–æ–≤', disabled=True
    )
    async def add_mage_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 7)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–ù–µ–∫—Ä–æ–º–∞–Ω—Ç–æ–≤', disabled=True
    )
    async def add_necromant_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 8)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–ë–∞—Ä–¥–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–ë–∞—Ä–¥–æ–≤', disabled=True
    )
    async def add_bard_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 9)

    @button(
        label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–î–µ–º–æ–Ω–æ–ª–æ–≥–æ–≤"', style=discord.ButtonStyle.gray,
        custom_id='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å–î–µ–º–æ–Ω–æ–ª–æ–≥–æ–≤', disabled=True
    )
    async def add_deamon_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        await self.check_interaction_permission(interaction, 10)

    @button(
        label='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ üì®',
        style=discord.ButtonStyle.gray,
        custom_id='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å–°–ø–∏—Å–æ–∫',
        disabled=True
    )
    async def select_callback(
        self, button: discord.ui.Select, interaction: discord.Interaction
    ):
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        channel: discord.TextChannel = rcd_application_channel.get('rcd_aplication_channel')
        f_embed: discord.Embed = embed.get('final_rcd_list_embed')
        publish_embed: discord.Embed = publish_rcd_embed(date=rcd_date_list.get('convert_rcd_date'))
        for field in [field for field in f_embed.fields if field.value != '']:
            name, value, inline = field.name, field.value, field.inline
            publish_embed.add_field(name=name, value=value, inline=inline)
        if '–°–ø–∏—Å–æ–∫ –†–ß–î' in channel.last_message.embeds[0].title:
            await channel.last_message.edit(embed=publish_embed)
        else:
            await channel.last_message.delete()
            await channel.send(embed=publish_embed)
        button: discord.ui.Button = self.children[13]
        button.disabled = False
        await interaction.message.edit(view=self)
        await interaction.respond(
            f'_–°–ø–∏—Å–æ–∫ –†–ß–î –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}_',
            ephemeral=True,
            delete_after=1
        )

    @button(
        label='–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ —Å–ø–∏—Å–∫–æ–º –†–ß–î', style=discord.ButtonStyle.red,
        custom_id='–ó–∞–≤–µ—Ä—à–∏—Ç—å–†–ß–î–°–ø–∏—Å–æ–∫', disabled=True
    )
    async def stop_callback(
        self,
        button: discord.ui.Button,
        interaction: discord.Interaction
    ):
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        await interaction.channel.delete_messages(
            [message for key, message in last_message_to_finish.items() if key != 'start_RCD_button_message']
        )
        await last_message_to_finish.get('start_RCD_button_message').edit(view=None)
        member_list.clear()
        rcd_date_list.clear()
        embed.clear()
        last_message_to_finish.clear()
        await interaction.respond(
            '_–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –†–ß–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ_',
            ephemeral=True,
            delete_after=2

        )

    async def check_interaction_permission(
            self,
            interaction: discord.Interaction,
            index: int,
    ):
        if not last_message_to_finish.get('final_rcd_list_message'):
            last_message_to_finish['final_rcd_list_message'] = interaction.channel.last_message
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        await interaction.respond(view=SelectMemberToRCD(index=index))


class StartRCDButton(View):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –†–ß–î –∑–∞—è–≤–æ–∫.

    Attributes:
    ----------
        channel: discord.TextChannel
            –ö–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –†–ß–î.
    """
    def __init__(
        self,
        timeout: float | None = None
    ):
        super().__init__(timeout=timeout)

    @select(
        select_type=discord.ComponentType.channel_select,
        min_values=1,
        max_values=1,
        placeholder='–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –†–ß–î',
        channel_types=[discord.ChannelType.text]
    )
    async def select_callback(
        self, select: discord.ui.Select, interaction: discord.Interaction
    ):
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        last_message_to_finish['start_RCD_button_message'] = interaction.message
        channel: discord.TextChannel = select.values[0]
        rcd_application_channel['rcd_aplication_channel'] = channel
        try:
            await channel.send(
                embed=start_rcd_embed(rcd_date_list.get('convert_rcd_date')),
                view=RCDButton()
            )
            await interaction.respond(view=CreateRCDList())
            self.children[0].disabled = True
            self.children[1].disabled = False
            self.remove_item(self.children[0])
            await interaction.response.edit_message(view=self)
            logger.info(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.display_name} –∑–∞–ø—É—Å—Ç–∏–ª '
                f'–∑–∞—è–≤–∫–∏ –Ω–∞ –†–ß–î'
            )
        except Exception as error:
            logger.error(f'–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É StartRCDButton –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}')

    @select(
        select_type=discord.ComponentType.user_select,
        min_values=1,
        max_values=24,
        placeholder='–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ø—Ä–æ—Å–∏—Ç—å –æ–± –†–ß–î',
        disabled=True
    )
    async def ask_callback(
        self,
        select: discord.ui.Select,
        interaction: discord.Interaction
    ):
        if not has_required_role(interaction.user):
            return await interaction.respond(
                ANSWERS_IF_NO_ROLE,
                ephemeral=True,
                delete_after=5
            )
        await interaction.response.defer()
        ask_users: list[discord.Member] = [user for user in select.values]
        for user in ask_users:
            await user.send(
                embed=ask_veteran_embed(
                    member=interaction.user, date=rcd_date_list.get('convert_rcd_date')
                ),
                view=PrivateMessageView(),
                delete_after=10800
            )
        self.disable_all_items()
        self.clear_items()
        await interaction.message.edit(view=self)
        await interaction.respond('_–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!_ ‚úÖ')
