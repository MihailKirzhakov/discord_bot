import asyncio
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Callable

import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, InputText
from loguru import logger

from .embeds import (
    start_auc_embed, results_embed, outbid_embed,
    end_auc_notification_embed
)
from .functions import (
    convert_bid,
    label_count,
    convert_to_mention,
    convert_sorted_message,
    seconds_until_date
)
from variables import (
    MAX_BUTTON_VALUE, MIN_BID_VALUE, NOT_SOLD, LEADER_NICKNAME
)


final_time: dict[str, datetime] = {}
channel_last_message: dict[str, discord.Message] = {}


class StartAucModal(Modal):
    """
    –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∞—É–∫—Ü–∏–æ–Ω–∞.

    Parametrs:
    ----------
        channel: discord.TextChannel
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å.

    Returns:
    --------
        None
    """
    def __init__(
            self,
            channel: discord.TextChannel
    ):
        super().__init__(title='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–∫—Ü–∏–æ–Ω–∞', timeout=None)
        self.channel = channel

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞',
                placeholder='–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞'
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º—ã—Ö –ª–æ—Ç–æ–≤',
                placeholder='–∫–æ–ª-–≤–æ –ª–æ—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 1 –¥–æ 25',
                min_length=1,
                max_length=MAX_BUTTON_VALUE
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É',
                placeholder=f'–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {MIN_BID_VALUE}',
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ —à–∞–≥ —Å—Ç–∞–≤–∫–∏',
                placeholder='—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É 100000'
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú',
                placeholder='–î–î.–ú–ú –ß–ß:–ú–ú',
                max_length=11
            )
        )

    async def callback(self, interaction: discord.Interaction):
        name_auc: str = str(self.children[0].value)
        count: int = int(self.children[1].value)
        start_bid: int = int(self.children[2].value)
        bid: int = int(self.children[3].value)
        target_date_time: str = str(self.children[4].value)
        if count < 1 or count > 25:
            return await interaction.respond(
                '_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 24_',
                ephemeral=True,
                delete_after=10
            )
        if final_time.get(name_auc) or channel_last_message.get(name_auc):
            name_auc += ' üòä'
        button_mentions: dict[str, str] = {}
        today: datetime = datetime.now()
        try:
            stop_time: datetime = today + timedelta(
                seconds=seconds_until_date(target_date_time)
            )
        except Exception as error:
            await interaction.respond(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–ª—Å—è –î–î.–ú–ú –ß–ß:–ú–ú'
            )
            logger.error(
                f'–ü—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã –≤ –∫–æ–º–∞–Ω–¥—É –∞—É–∫—Ü–∏–æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )
        final_time[name_auc] = stop_time
        start_auc_user = interaction.user
        user_mention = interaction.user.mention
        button_manager = View(timeout=None)
        for _ in range(count):
            auc_button: discord.ui.Button = Button(
                label=str(convert_bid(start_bid)),
                style=discord.ButtonStyle.green
            )
            button_manager.add_item(auc_button)
            auc_button.callback = bid_callback(
                button=auc_button,
                view=button_manager,
                start_bid=start_bid,
                bid=bid,
                start_auc_user=start_auc_user,
                stop_time=stop_time,
                user_mention=user_mention,
                count=count,
                name_auc=name_auc,
                final_time=final_time,
                button_mentions=button_mentions
            )
        try:
            await self.channel.send(
                embed=start_auc_embed(
                    user_mention=user_mention,
                    name_auc=name_auc,
                    stop_time=stop_time,
                    lot_count=count,
                    first_bid=convert_bid(start_bid),
                    next_bid=convert_bid(bid)
                ),
                view=button_manager
            )
            channel_last_message[name_auc] = self.channel.last_message
            await interaction.respond(
                f'_–ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø—É—â–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {self.channel.mention}_',
                ephemeral=True,
                delete_after=10
            )
            logger.info(
                f'–ö–æ–º–∞–Ω–¥–∞ /go_auc –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "{interaction.user.display_name}"'
            )
            await discord.utils.sleep_until(stop_time - timedelta(seconds=60))
            await self.channel.send(
                embed=end_auc_notification_embed(),
                delete_after=10
            )
            await check_timer(
                channel_last_message=channel_last_message.get(name_auc),
                view=button_manager,
                user_mention=user_mention,
                name_auc=name_auc,
                count=count,
                final_time=final_time,
                button_mentions=button_mentions
            )
        except Exception as error:
            await interaction.respond(
                f'–ù–µ –≤—ã—à–ª–æ, –≤–æ—Ç –æ—à–∏–±–∫–∞: {error}',
                ephemeral=True
            )
            logger.error(
                f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º '
                f'–≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ "{error}"'
            )


@commands.slash_command()
@commands.has_role('–ê—É–∫—Ü–∏–æ–Ω')
async def go_auc(
    ctx: discord.ApplicationContext,
    channel: discord.Option(
        discord.TextChannel,
        description='–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∞—É–∫—Ü–∏–æ–Ω',
        name_localizations={'ru': '–∫–∞–Ω–∞–ª'}
    ),  # type: ignore
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞.

    Parametrs:
    ----------
        ctx: discord.ApplicationContext
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.

        channel: discord.TextChannel
            –ö–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Embed'–∞

    Returns:
    --------
        None.
    """
    try:
        await ctx.response.send_modal(StartAucModal(channel=channel))
    except Exception as error:
        logger.error(
                f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –∫–æ–º–∞–Ω–¥–æ–π /go_auc '
                f'–≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ "{error}"'
            )


@go_auc.error
async def go_auc_error(
    ctx: discord.ApplicationContext, error: Exception
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã go_auc.

    Parametrs:
    ----------
        ctx: discord.ApplicationContext
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.

        error: error
            –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–Ω–∏–∫—à–µ–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.

    Returns:
    --------
        None.
    """
    if isinstance(error, commands.errors.MissingRole):
        await ctx.respond(
            '–ö–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ê—É–∫—Ü–∏–æ–Ω–µ—Ä!',
            ephemeral=True,
            delete_after=10
        )
    elif isinstance(error, commands.errors.PrivateMessageOnly):
        await ctx.respond(
            '–ö–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞!',
            ephemeral=True,
            delete_after=10
        )
    else:
        raise error


async def check_timer(
    channel_last_message: discord.Message,
    view: discord.ui.View,
    user_mention: str,
    name_auc: str,
    count: int,
    final_time: dict,
    button_mentions: dict
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–∏–Ω–≥–∞ —Ç–∞–π–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω.

    Parametrs:
    ----------
        channel_last_message: discord.Message
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.

        view: discord.ui.View
            –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ View.

        user_mention: str
            –¢—ç–≥ —é–∑–µ—Ä–∞.

        name_auc: str
            –ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞.

        count: int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤.

        final_time: dict
            –°–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.

        button_mentions: dict
            –°–ª–æ–≤–∞—Ä—å —Å —Ç—ç–≥–∞–º–∏ —é–∑–µ—Ä–æ–≤ –≤ –∫–Ω–æ–ø–∫–∞—Ö.

    Returns:
    --------
        None.
    """
    while True:
        if final_time.get(name_auc) > datetime.now():
            await asyncio.sleep(0.5)
        else:
            await auto_stop_auc(
                channel_last_message=channel_last_message,
                view=view,
                user_mention=user_mention,
                name_auc=name_auc,
                count=count,
                button_mentions=button_mentions
            )
            break


def bid_callback(
        button: discord.ui.Button,
        view: discord.ui.View,
        start_bid: int,
        bid: int,
        start_auc_user: discord.Member | discord.User,
        stop_time: datetime,
        user_mention: str,
        count: int,
        name_auc: str,
        final_time: dict,
        button_mentions: dict
) -> Callable:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏.

    Parametrs:
    ----------
        button: discord.ui.Button
            –ö–Ω–æ–ø–∫–∞.

        view: discord.ui.View
            –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ View.

        start_bid: int
            –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞.

        bid: int
            –®–∞–≥ —Å—Ç–∞–≤–∫–∏.

        start_auc_user: discord.Member | discord.User
            –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∞–≤—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω.

        stop_time: datetime
            –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.

        user_mention: str
            –¢—ç–≥ —é–∑–µ—Ä–∞.

        count: int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤.

        name_auc: str
            –ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞.

        final_time: dict
            –°–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.

        button_mentions: dict
            –°–ª–æ–≤–∞—Ä—å —Å —Ç—ç–≥–∞–º–∏ —é–∑–µ—Ä–æ–≤ –≤ –∫–Ω–æ–ø–∫–∞—Ö.

    Returns:
    --------
        inner: Callable
            –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è inner().
    """
    async def inner(interaction: discord.Interaction):
        await interaction.response.defer()
        nowtime: datetime = datetime.now()
        secondstime: timedelta = timedelta(seconds=60)
        plus_minute: datetime = nowtime + secondstime
        reserve_view: discord.ui.View = view
        button.style = discord.ButtonStyle.blurple
        name = interaction.user.display_name
        mention = interaction.user.mention
        original_label: Decimal = Decimal(button.label.split()[0][:-1])
        before_button_label = button.label
        try:
            label_count(button, original_label, name, bid)
            logger.debug(
                f'–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Ñ—É–Ω–∫—Ü–∏—è "label_count" –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, '
                f'—Ä–µ–∑—É–ª—å—Ç–∞—Ç "{button.label}"'
            )
            button_mentions[name] = mention
            if len(view.children) == 0:
                await interaction.message.edit(view=reserve_view)
                await interaction.followup.send(
                    f'–í –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Å–¥–µ–ª–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!'
                    f'–ë–æ—Ç –Ω–µ —Å–ª–æ–º–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ '
                    f'–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–Ω–æ–≤–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ '
                    f'{LEADER_NICKNAME}, –¥–ª—è —Å–∫–æ—Ä–µ–π—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!',
                    ephemeral=True,
                    delete_after=10
                )
                await start_auc_user.send(
                    f'–°–∏–≥–Ω–∞–ª –æ–± –æ—à–∏–±–∫–µ –≤–æ –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞! '
                    f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{interaction.user.display_name}" '
                    f'—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! '
                    f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è view.'
                )
                logger.error(
                    f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '
                    f'"{interaction.user.mention}" –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, '
                    f'–∫–æ—Ç–æ—Ä–∞—è —Å–Ω–æ—Å–∏—Ç –∫–Ω–æ–ø–∫–∏. –í–æ "view" —Å–ª–æ–∂–∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.'
                )
            else:
                if (stop_time - nowtime) < secondstime:
                    await interaction.message.edit(
                        view=view,
                        embed=start_auc_embed(
                            user_mention=user_mention,
                            name_auc=name_auc,
                            stop_time=plus_minute,
                            lot_count=count,
                            first_bid=convert_bid(start_bid),
                            next_bid=convert_bid(bid)
                        )
                    )
                    final_time[name_auc] = plus_minute
                else:
                    await interaction.message.edit(view=view)
                if 'K' != before_button_label[-1] and 'M' != before_button_label[-1] and interaction.user.display_name not in before_button_label:
                    time_of_bid = None
                    url = interaction.message.jump_url
                    take_nick = before_button_label.split()
                    member: discord.Member = discord.utils.get(interaction.guild.members, nick=take_nick[1])
                    if (datetime.now() + timedelta(seconds=60)) > final_time.get(name_auc) > datetime.now():
                        time_of_bid = plus_minute
                        delete_after = 60
                    else:
                        time_of_bid = stop_time
                        delete_after = 1800
                    await member.send(
                        embed=outbid_embed(
                            url=url, stop_time=time_of_bid,
                            delete_after=delete_after
                        ),
                        delete_after=delete_after
                    )
                    logger.info(
                        f'–°—Ç–∞–≤–∫—É "{member.display_name}" –ø–µ—Ä–µ–±–∏–ª "{interaction.user.display_name}"!'
                    )
        except Exception as error:
            logger.error(
                f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏ '
                f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ "{error}"'
            )
    return inner


async def auto_stop_auc(
        channel_last_message: discord.Message,
        view: discord.ui.View,
        user_mention: str,
        name_auc: str,
        count: int,
        button_mentions: dict
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.

    Parametrs:
    ----------
        channel_last_message: discord.Message
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.

        view: discord.ui.View
            –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ View

        user_mention: str
            –¢—ç–≥ —é–∑–µ—Ä–∞

        name_auc: str
            –ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞

        count: int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤

    Returns:
    --------
        None.
    """
    view.disable_all_items()
    label_values = [btn.label for btn in view.children]
    convert_label_values = convert_to_mention(
        label_values, button_mentions
    )
    count_not_bid = convert_label_values.count(NOT_SOLD)
    removed_not_bid: list = []
    for i in convert_label_values:
        if i != NOT_SOLD:
            removed_not_bid.append(i)
    sorted_list = sorted(
        removed_not_bid,
        key=convert_sorted_message,
        reverse=True
    )
    for _ in range(count_not_bid):
        sorted_list.append(NOT_SOLD)
    message = (
        '\n'.join([f'{i+1}. {val}' for i, val in enumerate(
            sorted_list
        )])
    )
    view.clear_items()
    try:
        await channel_last_message.edit(
            view=view,
            embed=results_embed(
                results_message=message,
                user_mention=user_mention,
                name_auc=name_auc,
                count=count
            )
        )
        logger.info(
            '–ê—É–∫—Ü–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!'
        )
    except Exception as error:
        logger.error(
            f'–ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ '
            f'"{error}"'
        )


def setup(bot: discord.Bot):
    bot.add_application_command(go_auc)
