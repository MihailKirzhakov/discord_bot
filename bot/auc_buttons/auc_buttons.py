import asyncio
from datetime import datetime, timedelta

import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, InputText
from loguru import logger

from .embeds import (
    start_auc_embed, results_embed, outbid_embed
)
from .functions import (
    convert_bid,
    convert_to_mention,
    convert_sorted_message,
    seconds_until_date,
    convert_bid_back
)
from variables import MIN_BID_VALUE, NOT_SOLD, LEADER_NICKNAME


final_time: dict[str, datetime] = {}
channel_last_message_dict: dict[str, discord.Message] = {}


class StartAucModal(Modal):
    """
    –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∞—É–∫—Ü–∏–æ–Ω–∞.
    """
    def __init__(
        self,
        channel: discord.TextChannel
    ):
        super().__init__(title='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–∫—Ü–∏–æ–Ω–∞', timeout=None)
        self.channel = channel

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞',
                placeholder='–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞'
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º—ã—Ö –ª–æ—Ç–æ–≤',
                placeholder='–∫–æ–ª-–≤–æ –ª–æ—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 1 –¥–æ 25',
                min_length=1,
                max_length=2
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É',
                placeholder=f'–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {MIN_BID_VALUE}',
            )
        )

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú',
                placeholder='–î–î.–ú–ú –ß–ß:–ú–ú',
                max_length=11
            )
        )

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer(invisible=False, ephemeral=True)

        name_auc: str = str(self.children[0].value)
        count: int = int(self.children[1].value)
        start_bid: int = int(self.children[2].value)
        target_date_time: str = str(self.children[3].value)
        start_auc_user: discord.Member = interaction.user
        user_mention: str = interaction.user.mention
        button_manager = View(timeout=None)
        button_mentions: dict[str, str] = {}
        today: datetime = datetime.now()

        if count < 1 or count > 25:
            return await interaction.respond(
                '_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 24_',
                delete_after=10
            )

        if final_time.get(name_auc) or channel_last_message_dict.get(name_auc):
            name_auc += ' üòä'

        try:
            stop_time: datetime = today + timedelta(
                seconds=seconds_until_date(target_date_time)
            )
            final_time[name_auc] = stop_time
        except Exception as error:
            await interaction.respond(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–ª—Å—è –î–î.–ú–ú –ß–ß:–ú–ú'
            )
            logger.error(
                f'–ü—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã –≤ –∫–æ–º–∞–Ω–¥—É –∞—É–∫—Ü–∏–æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {error}'
            )

        for index in range(count):
            button_manager.add_item(BidButton(
                start_bid=start_bid,
                start_auc_user=start_auc_user,
                user_mention=user_mention,
                count=count,
                name_auc=name_auc,
                button_mentions=button_mentions,
                button_manager=button_manager,
                index=index
            ))

        await self.channel.send(embed=start_auc_embed(
                user_mention=user_mention,
                name_auc=name_auc,
                stop_time=stop_time,
                lot_count=count,
                first_bid=convert_bid(start_bid)
            ),
            view=button_manager)
        await interaction.respond('‚úÖ', delete_after=1)
        channel_last_message_dict[name_auc] = self.channel.last_message

        await discord.utils.sleep_until(stop_time - timedelta(seconds=60))
        await check_timer(
            view=button_manager,
            user_mention=user_mention,
            name_auc=name_auc,
            count=count,
            final_time=final_time,
            button_mentions=button_mentions
        )


class PassBid(Modal):
    def __init__(
        self,
        btn_label: str,
        start_bid: int,
        start_auc_user: discord.Member,
        user_mention: str,
        count: int,
        name_auc: str,
        button_mentions: dict[str, str],
        button_manager: View,
        index: int,
        button_message: discord.Message
    ):
        super().__init__(title='–£–∫–∞–∂–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É', timeout=None)
        self.btn_label = btn_label
        self.start_bid = start_bid
        self.start_auc_user = start_auc_user
        self.user_mention = user_mention
        self.count = count
        self.name_auc = name_auc
        self.button_mentions = button_mentions
        self.button_manager = button_manager
        self.index = index
        self.button_message = button_message

        self.add_item(
            InputText(
                style=discord.InputTextStyle.short,
                label='–°—Ç–∞–≤–∫–∞ –∫—Ä–∞—Ç–Ω–∞—è 100.000 –∏ –Ω–µ –±–æ–ª–µ–µ 99.9M',
                placeholder='–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–ª–∏–∫–æ–≤!',
                min_length=6,
                max_length=8
            )
        )

    async def callback(
        self,
        interaction: discord.Interaction
    ):
        await interaction.response.defer(invisible=False, ephemeral=True)

        try:
            if not self.children[0].value.isdigit():
                return await interaction.respond(
                    '_–£–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! ‚ùå_',
                    delete_after=2
                )

            if int(self.children[0].value) % 100_000 != 0:
                return await interaction.respond(
                    '_–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 100.000! ‚ùå_',
                    delete_after=2
                )

            select_bid: int = int(self.children[0].value)
            reserve_button_manager = self.button_manager
            user_name: str = interaction.user.display_name
            user_mention: str = interaction.user.mention
            nowtime: datetime = datetime.now()
            sixty_seconds: timedelta = timedelta(seconds=60)
            plus_minute: datetime = nowtime + sixty_seconds
            during_button_label: str = self.btn_label

            if len(self.button_manager.children) == 0:
                await self.button_message.edit(view=reserve_button_manager)
                await interaction.respond(
                    f'–í –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Å–¥–µ–ª–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!'
                    f'–ë–æ—Ç –Ω–µ —Å–ª–æ–º–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ '
                    f'–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–Ω–æ–≤–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ '
                    f'{LEADER_NICKNAME}, –¥–ª—è —Å–∫–æ—Ä–µ–π—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!',
                    delete_after=10
                )
                await self.start_auc_user.send(
                    f'_–°–∏–≥–Ω–∞–ª –æ–± –æ—à–∏–±–∫–µ –≤–æ –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞! '
                    f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{interaction.user.display_name}" '
                    f'—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! '
                    f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è view._'
                )
                logger.error(
                    f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '
                    f'"{interaction.user.mention}" –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, '
                    f'–∫–æ—Ç–æ—Ä–∞—è —Å–Ω–æ—Å–∏—Ç –∫–Ω–æ–ø–∫–∏. –í–æ "view" —Å–ª–æ–∂–∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.'
                )

            label_parts = self.btn_label.split()
            full_label_number = convert_bid_back(label_parts[0])
            error_response = '_–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ–π —Ç–µ–∫—É—â–µ–π! ‚ùå_'

            if (
                self.button_manager.children[self.index].style
                == discord.ButtonStyle.green and full_label_number > select_bid
            ) or (full_label_number >= select_bid and len(label_parts) > 1):
                return await interaction.respond(
                    error_response,
                    delete_after=2
                )

            self.button_manager.children[self.index].label = f'{convert_bid(select_bid)} {interaction.user.display_name}'
            self.button_manager.children[self.index].style = discord.ButtonStyle.blurple
            self.button_mentions[user_name] = user_mention

            if (final_time.get(self.name_auc) - nowtime) < sixty_seconds:
                await self.button_message.edit(
                    view=self.button_manager,
                    embed=start_auc_embed(
                        user_mention=self.user_mention,
                        name_auc=self.name_auc,
                        stop_time=plus_minute,
                        lot_count=self.count,
                        first_bid=convert_bid(self.start_bid)
                    )
                )
                final_time[self.name_auc] = plus_minute
            logger.info(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{interaction.user.display_name}" —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É'
            )

            if len(label_parts) > 1 and user_name not in during_button_label:
                time_of_bid = None
                url = self.button_message.jump_url
                take_during_nick = during_button_label.split()
                during_member: discord.Member = discord.utils.get(interaction.guild.members, nick=take_during_nick[1])
                if (datetime.now() + timedelta(seconds=60)) > final_time.get(self.name_auc) > datetime.now():
                    time_of_bid = plus_minute
                    delete_after = 60
                else:
                    time_of_bid = final_time.get(self.name_auc)
                    delete_after = 1800
                try:
                    await during_member.send(
                        embed=outbid_embed(
                            url=url, stop_time=time_of_bid,
                            delete_after=delete_after
                        ),
                        delete_after=delete_after
                    )
                except discord.Forbidden:
                    logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "{during_member.display_name}" –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
                logger.info(
                    f'–°—Ç–∞–≤–∫—É "{during_member.display_name}" –ø–µ—Ä–µ–±–∏–ª "{interaction.user.display_name}"!'
                )

            await self.button_message.edit(view=self.button_manager)
            await interaction.respond('‚úÖ', delete_after=1)
        except Exception as error:
            await interaction.respond('‚ùå', delete_after=1)
            logger.error(
                f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏ '
                f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ "{error}"'
            )


class BidButton(Button):
    """–ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Ç–∞–≤–∫–æ–π –∏ –Ω–∏–∫–Ω–µ–π–º–æ–º, —Å–¥–µ–ª–∞–≤—à–µ–≥–æ —Å—Ç–∞–≤–∫—É"""
    def __init__(
        self,
        start_bid: int,
        start_auc_user: discord.Member,
        user_mention: str,
        count: int,
        name_auc: str,
        button_mentions: dict[str, str],
        button_manager: View,
        index: int,
    ):
        super().__init__(
            style=discord.ButtonStyle.green,
            label=convert_bid(start_bid)
        )
        self.start_bid = start_bid
        self.start_auc_user = start_auc_user
        self.user_mention = user_mention
        self.count = count
        self.name_auc = name_auc
        self.button_mentions = button_mentions
        self.button_manager = button_manager
        self.index = index

    async def callback(self, interaction: discord.Interaction):
        try:
            await interaction.response.send_modal(
                PassBid(
                    btn_label=self.label,
                    start_bid=self.start_bid,
                    start_auc_user=self.start_auc_user,
                    user_mention=self.user_mention,
                    count=self.count,
                    name_auc=self.name_auc,
                    button_mentions=self.button_mentions,
                    button_manager=self.button_manager,
                    index=self.index,
                    button_message=interaction.message
                ))
        except Exception as error:
            await interaction.respond('‚ùå', delete_after=1)
            logger.error(
                f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏ '
                f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ "{error}"'
            )


@commands.slash_command()
@commands.has_role('–ê—É–∫—Ü–∏–æ–Ω')
async def go_auc(
    ctx: discord.ApplicationContext,
    channel: discord.Option(
        discord.TextChannel,
        description='–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∞—É–∫—Ü–∏–æ–Ω',
        name_localizations={'ru': '–∫–∞–Ω–∞–ª'}
    ),  # type: ignore
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞.
    """
    try:
        await ctx.response.send_modal(StartAucModal(channel=channel))
    except Exception as error:
        await ctx.respond('‚ùå', delete_after=1)
        logger.error(
                f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –∫–æ–º–∞–Ω–¥–æ–π /go_auc '
                f'–≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ "{error}"'
            )


@go_auc.error
async def go_auc_error(
    ctx: discord.ApplicationContext, error: Exception
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã go_auc.
    """
    if isinstance(error, commands.errors.MissingRole):
        await ctx.respond(
            '_–ö–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ê—É–∫—Ü–∏–æ–Ω–µ—Ä! ‚ùå_',
            ephemeral=True,
            delete_after=10
        )
    elif isinstance(error, commands.errors.PrivateMessageOnly):
        await ctx.respond(
            '_–ö–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞!‚ùå _',
            ephemeral=True,
            delete_after=10
        )
    else:
        raise error


async def check_timer(
    view: View,
    user_mention: str,
    name_auc: str,
    count: int,
    final_time: dict,
    button_mentions: dict
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–∏–Ω–≥–∞ —Ç–∞–π–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω.
    """
    while True:
        if final_time.get(name_auc) > datetime.now():
            await asyncio.sleep(0.5)
        else:
            await auto_stop_auc(
                view=view,
                user_mention=user_mention,
                name_auc=name_auc,
                count=count,
                button_mentions=button_mentions
            )
            break


async def auto_stop_auc(
        view: View,
        user_mention: str,
        name_auc: str,
        count: int,
        button_mentions: dict
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.
    """
    view.disable_all_items()
    label_values = [btn.label for btn in view.children[:-1]]
    convert_label_values = convert_to_mention(
        label_values, button_mentions
    )
    count_not_bid = convert_label_values.count(NOT_SOLD)
    removed_not_bid: list = []
    for i in convert_label_values:
        if i != NOT_SOLD:
            removed_not_bid.append(i)
    sorted_list = sorted(
        removed_not_bid,
        key=convert_sorted_message,
        reverse=True
    )
    for _ in range(count_not_bid):
        sorted_list.append(NOT_SOLD)
    message = (
        '\n'.join([f'{i+1}. {val}' for i, val in enumerate(
            sorted_list
        )])
    )
    view.clear_items()
    try:
        await channel_last_message_dict.get(name_auc).edit(
            view=view,
            embed=results_embed(
                results_message=message,
                user_mention=user_mention,
                name_auc=name_auc,
                count=count
            )
        )
        logger.info(
            '–ê—É–∫—Ü–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!'
        )
    except Exception as error:
        logger.error(
            f'–ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ '
            f'"{error}"'
        )
    finally:
        channel_last_message_dict.pop(name_auc)
        final_time.pop(name_auc)


def setup(bot: discord.Bot):
    bot.add_application_command(go_auc)
